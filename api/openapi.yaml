openapi: 3.0.0
info:
  title: Task Management API
  description: A comprehensive API for managing tasks, projects, and team collaboration
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@taskmanager.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.taskmanager.com/v1
    description: Production server
  - url: https://staging-api.taskmanager.com/v1
    description: Staging server

tags:
  - name: Tasks
    description: Operations related to tasks
  - name: Projects
    description: Operations related to projects

paths:
  /Tasks:
    getting:
      summary: Get all tasks
      description: Retrieve a paginated list of tasks
      operationId: getTasks
      tags:
        - Tasks
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of tasks per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filter tasks by status
          required: false
          schema:
            type: string
            enum: [todo, in_progress, completed, cancelled]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new task
      description: Create a new task with the provided information
      operationId: createTask
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /tasks/{taskId}:
    get:
      summary: Get task by ID
      description: Retrieve a specific task by its ID
      operationId: getTaskById
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          description: The ID of the task to retrieve
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update task
      description: Update an existing task
      operationId: updateTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          description: The ID of the task to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete task
      description: Delete a task permanently
      operationId: deleteTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          description: The ID of the task to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects:
    get:
      summary: Get all projects
      description: Retrieve a list of all projects
      operationId: getProjects
      tags:
        - Projects
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the task
        title:
          type: string
          description: Title of the task
          maxLength: 200
        description:
          type: string
          description: Detailed description of the task
        status:
          type: string
          enum: [todo, in_progress, completed, cancelled]
          description: Current status of the task
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Priority level of the task
        due_date:
          type: string
          format: date
          description: Due date for the task
        created_at:
          type: string
          format: date-time
          description: When the task was created
        updated_at:
          type: string
          format: date-time
          description: When the task was last updated
        assignee_id:
          type: string
          description: ID of the user assigned to the task
        project_id:
          type: string
          description: ID of the project this task belongs to
      required:
        - id
        - title
        - status
        - priority
        - created_at

    CreateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the task
          maxLength: 200
        description:
          type: string
          description: Detailed description of the task
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Priority level of the task
          default: medium
        due_date:
          type: string
          format: date
          description: Due date for the task
        assignee_id:
          type: string
          description: ID of the user to assign the task to
        project_id:
          type: string
          description: ID of the project to assign the task to
      required:
        - title

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          description: Title of the task
          maxLength: 200
        description:
          type: string
          description: Detailed description of the task
        status:
          type: string
          enum: [todo, in_progress, completed, cancelled]
          description: Current status of the task
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Priority level of the task
        due_date:
          type: string
          format: date
          description: Due date for the task
        assignee_id:
          type: string
          description: ID of the user assigned to the task
        project_id:
          type: string
          description: ID of the project this task belongs to

    TaskList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
            limit:
              type: integer
              description: Number of items per page
            total:
              type: integer
              description: Total number of items
            total_pages:
              type: integer
              description: Total number of pages
          required:
            - page
            - limit
            - total
      required:
        - data
        - pagination

    Project:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the project
        name:
          type: string
          description: Name of the project
          maxLength: 100
        description:
          type: string
          description: Description of the project
        status:
          type: string
          enum: [active, completed, archived]
          description: Current status of the project
        created_at:
          type: string
          format: date-time
          description: When the project was created
        updated_at:
          type: string
          format: date-time
          description: When the project was last updated
      required:
        - id
        - name
        - status
        - created_at

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
            details:
              type: object
              description: Additional error details
          required:
            - code
            - message

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for API authentication

security:
  - BearerAuth: [] 